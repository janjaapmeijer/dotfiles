{{- if and (eq .chezmoi.os "linux") (.install_apps) -}}
#!/bin/bash

# get architecture of device
architecture=""
case $(uname -m) in
    i386 | i686)   architecture="386" ;;
    x86_64) architecture="amd64" ;;
    arm)    dpkg --print-architecture | grep -q "arm64" && architecture="arm64" || architecture="arm" ;;
    *)   echo "Unable to determine system architecture."; exit 1 ;;
esac

# add keyrings
# VSCodium
wget -qO - https://gitlab.com/paulcarroty/vscodium-deb-rpm-repo/raw/master/pub.gpg \
  | gpg --dearmor \
  | sudo dd of=/usr/share/keyrings/vscodium-archive-keyring.gpg
echo 'deb [signed-by=/usr/share/keyrings/vscodium-archive-keyring.gpg] https://download.vscodium.com/debs vscodium main' \
  | sudo tee /etc/apt/sources.list.d/vscodium.list

# Brave browser
sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=$architecture] https://brave-browser-apt-release.s3.brave.com/ stable main" \
  | sudo tee /etc/apt/sources.list.d/brave-browser-release.list

# Syncthing
sudo curl -L -o /usr/share/keyrings/syncthing-archive-keyring.gpg https://syncthing.net/release-key.gpg
echo 'deb [signed-by=/usr/share/keyrings/syncthing-archive-keyring.gpg] https://apt.syncthing.net/ syncthing stable' \
  | sudo tee /etc/apt/sources.list.d/syncthing.list

# Microsoft Teams
#sudo curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
#sudo sh -c "echo 'deb ["arch=$architecture"] https://packages.microsoft.com/repos/ms-teams stable main' > /etc/apt/sources.list.d/teams.list"
#sudo apt install teams

# install Joplin
wget -O - https://raw.githubusercontent.com/laurent22/joplin/dev/Joplin_install_and_update.sh | bash

# install zotero
wget -qO- https://raw.githubusercontent.com/retorquere/zotero-deb/master/install.sh | bash

# Add package repositories
sudo add-apt-repository ppa:linrunner/tlp

# Script to install Debian applications for new machine
{{ if eq .chezmoi.os "linux" -}}
  sudo apt update && sudo apt upgrade
  {{ range .packages.linux.apt -}}
  sudo apt install {{ . | quote }}
  {{ end -}}
  sudo snap refresh
  {{ range .packages.linux.snap -}}
  sudo snap install {{ . | quote }}
  {{ end -}}
{{- end -}}

# Set environment variables

# tlp settings for battery optimization
# battery charge thresholds
sed 's/^ *# *START_CHARGE_THRESH_BAT0 *= *[^ ]*/START_CHARGE_THRESH_BAT0=75/' /etc/tlp.conf
sed 's/^ *# *STOP_CHARGE_THRESH_BAT0 *= *[^ ]*/STOP_CHARGE_THRESH_BAT0=85/' /etc/tlp.conf

# power profiles
sed 's/^ *# *PLATFORM_PROFILE_ON_AC *= *[^ ]*/PLATFORM_PROFILE_ON_AC=performance/' /etc/tlp.conf
sed 's/^ *# *PLATFORM_PROFILE_ON_BAT *= *[^ ]*/PLATFORM_PROFILE_ON_BAT=low-power/' /etc/tlp.conf

sed 's/^ *# *CPU_ENERGY_PERF_POLICY_ON_AC *= *[^ ]*/CPU_ENERGY_PERF_POLICY_ON_AC=performance/' /etc/tlp.conf
sed 's/^ *# *CPU_ENERGY_PERF_POLICY_ON_BAT *= *[^ ]*/CPU_ENERGY_PERF_POLICY_ON_BAT=power/' /etc/tlp.conf

sed 's/^ *# *CPU_BOOST_ON_AC *= *[^ ]*/CPU_BOOST_ON_AC=1/' /etc/tlp.conf
sed 's/^ *# *CPU_BOOST_ON_BAT *= *[^ ]*/CPU_BOOST_ON_BAT=0/' /etc/tlp.conf

sudo tlp start

# Install Miniconda
if ! conda --version  
then
  mkdir -p ~/miniconda3
  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/Downloads/Miniconda3-latest-Linux-x86_64.sh
  bash ~/Downloads/Miniconda3-latest-Linux-x86_64.sh -b -u -p ~/miniconda3
  rm -rf ~/Downloads/Miniconda3-latest-Linux-x86_64.sh
  echo 'export PATH=~/miniconda3/bin:$PATH' >> ~/.bash_profile
  source ~/.bash_profile
fi

# Create conda system environment
if conda info --envs | grep -q system
then
  echo "conda environment system already exists"
else
  conda create --name system
fi

{{- end -}}
